# validate_annotations.py
# This program will make sure the annotations.json file generated by main.py
# is accurate, contains all categories.

import json
import sys

if len(sys.argv) != 2:
    print("Please give the annotation json file that main.py made to validate!")
    exit(1)

with open(sys.argv[1], "r") as f:
    annotations = json.load(f)

valid_count = 0
total_count = len(annotations.keys())
for a in list(annotations.keys()): # iterate over copy so we can delete stuff.
    valid = True
    for cat in ["story", "suspense", "curiosity", "surprise"]:
        if cat not in annotations[a]:
            print(f"Passage ID {a}: no {cat} annotation!")
            valid = False
            break
        if cat != "story" and \
           isinstance(annotations[a][cat], str) and \
           annotations[a][cat].rstrip() not in ["high", "medium", "low"]:
            # Incorrect reader's perception annotation for ternary scales
            valid = False
            print(f"Passage ID {a}: invalid annotation '{annotations[a][cat]}' for ternary RP")
        elif cat != "story" and \
             isinstance(annotations[a][cat], str) and \
             annotations[a][cat].rstrip() != annotations[a][cat]:
            # Correct the label
            print(f"Passage ID {a}: Correcting label '{annotations[a][cat]}'")
            annotations[a][cat] = annotations[a][cat].rstrip()
    if valid:
        valid_count += 1
    else:
        del annotations[a]

if valid_count < total_count:
    with open(sys.argv[1], "w") as f:
        print("Saving validated version")
        json.dump(annotations, f)
print(f"{valid_count}/{total_count} annotations were valid.")
